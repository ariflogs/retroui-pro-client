{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@tanstack+react-router-devtools@1.132.51_@tanstack+react-router@1.132.47_react-dom@19.2.0_rea_op2cws2d5zsyy26htopb655noy/node_modules/@tanstack/react-router-devtools/src/TanStackRouterDevtools.tsx", "../../../../../node_modules/.pnpm/@tanstack+react-router-devtools@1.132.51_@tanstack+react-router@1.132.47_react-dom@19.2.0_rea_op2cws2d5zsyy26htopb655noy/node_modules/@tanstack/react-router-devtools/src/TanStackRouterDevtoolsPanel.tsx", "../../../../../node_modules/.pnpm/@tanstack+react-router-devtools@1.132.51_@tanstack+react-router@1.132.47_react-dom@19.2.0_rea_op2cws2d5zsyy26htopb655noy/node_modules/@tanstack/react-router-devtools/src/index.ts"],
  "sourcesContent": ["import { TanStackRouterDevtoolsCore } from '@tanstack/router-devtools-core'\nimport { Fragment, useEffect, useRef, useState } from 'react'\nimport { useRouter, useRouterState } from '@tanstack/react-router'\nimport type { ButtonHTMLAttributes, HTMLAttributes } from 'react'\nimport type { AnyRouter } from '@tanstack/react-router'\nimport type React from 'react'\n\ninterface DevtoolsOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * Use this to add props to the panel. For example, you can add className, style (merge and override default style), etc.\n   */\n  panelProps?: HTMLAttributes<HTMLDivElement>\n  /**\n   * Use this to add props to the close button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  closeButtonProps?: ButtonHTMLAttributes<HTMLButtonElement>\n  /**\n   * Use this to add props to the toggle button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  toggleButtonProps?: ButtonHTMLAttributes<HTMLButtonElement>\n  /**\n   * The position of the TanStack Router logo to open and close the devtools panel.\n   * Defaults to 'bottom-left'.\n   */\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  /**\n   * Use this to render the devtools inside a different type of container element for a11y purposes.\n   * Any string which corresponds to a valid intrinsic JSX element is allowed.\n   * Defaults to 'footer'.\n   */\n  containerElement?: string | any\n  /**\n   * The router instance to use for the devtools.\n   */\n  router?: AnyRouter\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nexport function TanStackRouterDevtools(\n  props: DevtoolsOptions,\n): React.ReactElement | null {\n  const {\n    initialIsOpen,\n    panelProps,\n    closeButtonProps,\n    toggleButtonProps,\n    position,\n    containerElement,\n    shadowDOMTarget,\n    router: propsRouter,\n  } = props\n\n  const hookRouter = useRouter({ warn: false })\n  const activeRouter = propsRouter ?? hookRouter\n\n  const activeRouterState = useRouterState({ router: activeRouter })\n\n  const devToolRef = useRef<HTMLDivElement>(null)\n  const [devtools] = useState(\n    () =>\n      new TanStackRouterDevtoolsCore({\n        initialIsOpen,\n        panelProps,\n        closeButtonProps,\n        toggleButtonProps,\n        position,\n        containerElement,\n        shadowDOMTarget,\n        router: activeRouter,\n        routerState: activeRouterState,\n      }),\n  )\n\n  // Update devtools when props change\n  useEffect(() => {\n    devtools.setRouter(activeRouter)\n  }, [devtools, activeRouter])\n\n  useEffect(() => {\n    devtools.setRouterState(activeRouterState)\n  }, [devtools, activeRouterState])\n\n  useEffect(() => {\n    devtools.setOptions({\n      initialIsOpen: initialIsOpen,\n      panelProps: panelProps,\n      closeButtonProps: closeButtonProps,\n      toggleButtonProps: toggleButtonProps,\n      position: position,\n      containerElement: containerElement,\n      shadowDOMTarget: shadowDOMTarget,\n    })\n  }, [\n    devtools,\n    initialIsOpen,\n    panelProps,\n    closeButtonProps,\n    toggleButtonProps,\n    position,\n    containerElement,\n    shadowDOMTarget,\n  ])\n\n  useEffect(() => {\n    if (devToolRef.current) {\n      devtools.mount(devToolRef.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return (\n    <Fragment>\n      <div ref={devToolRef} />\n    </Fragment>\n  )\n}\n", "import { useRouter, useRouterState } from '@tanstack/react-router'\nimport { TanStackRouterDevtoolsPanelCore } from '@tanstack/router-devtools-core'\nimport React, { useEffect, useRef, useState } from 'react'\nimport type { AnyRouter } from '@tanstack/react-router'\n\nexport interface DevtoolsPanelOptions {\n  /**\n   * The standard React style object used to style a component with inline styles\n   */\n  style?: any\n  /**\n   * The standard React class property used to style a component with classes\n   */\n  className?: string\n  /**\n   * A boolean variable indicating whether the panel is open or closed\n   */\n  isOpen?: boolean\n  /**\n   * A function that toggles the open and close state of the panel\n   */\n  setIsOpen?: (isOpen: boolean) => void\n  /**\n   * Handles the opening and closing the devtools panel\n   */\n  handleDragStart?: (e: any) => void\n  /**\n   * A boolean variable indicating if the \"lite\" version of the library is being used\n   */\n  router?: AnyRouter\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nexport const TanStackRouterDevtoolsPanel: React.FC<DevtoolsPanelOptions> = (\n  props,\n): React.ReactElement | null => {\n  const { router: propsRouter, ...rest } = props\n  const hookRouter = useRouter({ warn: false })\n  const activeRouter = propsRouter ?? hookRouter\n  const activeRouterState = useRouterState({ router: activeRouter })\n\n  const devToolRef = useRef<HTMLDivElement>(null)\n  const [devtools] = useState(\n    () =>\n      new TanStackRouterDevtoolsPanelCore({\n        ...rest,\n        router: activeRouter,\n        routerState: activeRouterState,\n      }),\n  )\n\n  // Update devtools when props change\n  useEffect(() => {\n    devtools.setRouter(activeRouter)\n  }, [devtools, activeRouter])\n\n  useEffect(() => {\n    devtools.setRouterState(activeRouterState)\n  }, [devtools, activeRouterState])\n\n  useEffect(() => {\n    devtools.setOptions({\n      className: props.className,\n      style: props.style,\n      shadowDOMTarget: props.shadowDOMTarget,\n    })\n  }, [devtools, props.className, props.style, props.shadowDOMTarget])\n\n  useEffect(() => {\n    if (devToolRef.current) {\n      devtools.mount(devToolRef.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return (\n    <>\n      <div ref={devToolRef} />\n    </>\n  )\n}\n", "import * as Devtools from './TanStackRouterDevtools'\nimport * as DevtoolsPanel from './TanStackRouterDevtoolsPanel'\n\nexport const TanStackRouterDevtools: (typeof Devtools)['TanStackRouterDevtools'] =\n  process.env.NODE_ENV !== 'development'\n    ? function () {\n        return null\n      }\n    : Devtools.TanStackRouterDevtools\n\nexport const TanStackRouterDevtoolsInProd: (typeof Devtools)['TanStackRouterDevtools'] =\n  Devtools.TanStackRouterDevtools\n\nexport const TanStackRouterDevtoolsPanel: (typeof DevtoolsPanel)['TanStackRouterDevtoolsPanel'] =\n  process.env.NODE_ENV !== 'development'\n    ? function () {\n        return null\n      }\n    : DevtoolsPanel.TanStackRouterDevtoolsPanel\n\nexport const TanStackRouterDevtoolsPanelInProd: (typeof DevtoolsPanel)['TanStackRouterDevtoolsPanel'] =\n  DevtoolsPanel.TanStackRouterDevtoolsPanel\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AA6CO,SAAS,uBACd,OAC2B;AAC3B,QAAM;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ;EAAA,IACN;AAEJ,QAAM,aAAa,UAAU,EAAE,MAAM,MAAA,CAAO;AAC5C,QAAM,eAAe,eAAe;AAEpC,QAAM,oBAAoB,eAAe,EAAE,QAAQ,aAAA,CAAc;AAEjE,QAAM,iBAAa,qBAAuB,IAAI;AAC9C,QAAM,CAAC,QAAQ,QAAI;IACjB,MACE,IAAI,2BAA2B;MAC7B;MACA;MACA;MACA;MACA;MACA;MACA;MACA,QAAQ;MACR,aAAa;IAAA,CACd;EAAA;AAIL,8BAAU,MAAM;AACd,aAAS,UAAU,YAAY;EACjC,GAAG,CAAC,UAAU,YAAY,CAAC;AAE3B,8BAAU,MAAM;AACd,aAAS,eAAe,iBAAiB;EAC3C,GAAG,CAAC,UAAU,iBAAiB,CAAC;AAEhC,8BAAU,MAAM;AACd,aAAS,WAAW;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACD;EACH,GAAG;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;AAED,8BAAU,MAAM;AACd,QAAI,WAAW,SAAS;AACtB,eAAS,MAAM,WAAW,OAAO;IACnC;AAEA,WAAO,MAAM;AACX,eAAS,QAAA;IACX;EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,aAAA,wBACG,uBAAA,EACC,cAAA,wBAAC,OAAA,EAAI,KAAK,WAAA,CAAY,EAAA,CACxB;AAEJ;A;;;;ACzFO,IAAM,8BAA8D,CACzE,UAC8B;AAC9B,QAAM,EAAE,QAAQ,aAAa,GAAG,KAAA,IAAS;AACzC,QAAM,aAAa,UAAU,EAAE,MAAM,MAAA,CAAO;AAC5C,QAAM,eAAe,eAAe;AACpC,QAAM,oBAAoB,eAAe,EAAE,QAAQ,aAAA,CAAc;AAEjE,QAAM,iBAAa,sBAAuB,IAAI;AAC9C,QAAM,CAAC,QAAQ,QAAI;IACjB,MACE,IAAI,gCAAgC;MAClC,GAAG;MACH,QAAQ;MACR,aAAa;IAAA,CACd;EAAA;AAIL,+BAAU,MAAM;AACd,aAAS,UAAU,YAAY;EACjC,GAAG,CAAC,UAAU,YAAY,CAAC;AAE3B,+BAAU,MAAM;AACd,aAAS,eAAe,iBAAiB;EAC3C,GAAG,CAAC,UAAU,iBAAiB,CAAC;AAEhC,+BAAU,MAAM;AACd,aAAS,WAAW;MAClB,WAAW,MAAM;MACjB,OAAO,MAAM;MACb,iBAAiB,MAAM;IAAA,CACxB;EACH,GAAG,CAAC,UAAU,MAAM,WAAW,MAAM,OAAO,MAAM,eAAe,CAAC;AAElE,+BAAU,MAAM;AACd,QAAI,WAAW,SAAS;AACtB,eAAS,MAAM,WAAW,OAAO;IACnC;AAEA,WAAO,MAAM;AACX,eAAS,QAAA;IACX;EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,aACE,yBAAA,8BAAA,EACE,cAAA,yBAAC,OAAA,EAAI,KAAK,WAAA,CAAY,EAAA,CACxB;AAEJ;;;ACnFO,IAAMA,0BACX,QACI,WAAY;AACV,SAAO;AACT,IACAC;AAEC,IAAM,+BACXA;AAEK,IAAMC,+BACX,QACI,WAAY;AACV,SAAO;AACT,IACAC;AAEC,IAAM,oCACXA;",
  "names": ["TanStackRouterDevtools", "Devtools.TanStackRouterDevtools", "TanStackRouterDevtoolsPanel", "DevtoolsPanel.TanStackRouterDevtoolsPanel"]
}
